#!/bin/sh
# update or upgrade a jail's packages

ERROR() {
  printf 'error: '
  printf "${@}"
  printf '\n'
  exit 1
}

VERBOSE() {
  [ X"${verbose}" = X"no" ] && return 0
  printf "${@}"
  printf '\n'
}

USAGE() {
  if [ -n "${1}" ]
  then
    printf 'error: '
    printf "${@}"
    printf '\n'
  fi
  cat <<EOF
usage: ${0##*/} <options> jails...
       --help                 -h            this message
       --verbose              -v            more messages
       --yes                  -y            answer yes to all prompts
       --prefix=DIR           -p DIR        jail chroot directory prefix [${prefix}]
       --upgrade              -u            upgrade packages
       --clean                -c            clean downloads
       --jexec                -j            use jexec in running jail instead of chroot
       --chroot               -C            use pkg --chroot instead of jexec
       --autoremove           -a            autoremove
       --debug                -D            show debug information
EOF
  exit 1
}

GetYN() {
  local yorn junk
  while :
  do
    read -p "${*} [y/n] ? " yorn junk
    case "${yorn}" in
      [yY]|[yY][eE][sS])
        return 0
        ;;
      [nN]|[nN][oO])
        return 1
        ;;
      *)
        echo Please answer yes or no
        ;;
    esac
  done
}


# main program
verbose=no
debug=no
prompt=yes
prefix=/jails
upgrade=no
clean=no
autoremove=no
mode=auto

# parse options
while getopts :hvyucajCD-: option
do
  # convert long options
  if [ X"${option}" = X"-" ]
  then
    option="${OPTARG%%=*}"
    OPTARG="${OPTARG#${option}}"
    OPTARG="${OPTARG#=}"
  fi
  case "${option}" in
    (v|verbose)
      verbose=yes
      ;;

    (y|yes)
      prompt=no
      ;;

    (u|upgrade)
      upgrade=yes
      ;;

    (c|clean)
      clean=yes
      ;;

    (j|jexec)
      mode=jexec
      ;;

    (C|chroot)
      mode=chroot
      ;;

    (a|autoremove)
      autoremove=yes
      ;;

    (--)
      break
      ;;

    (D|debug)
      debug=yes
      ;;

    (h|help)
      USAGE
      ;;

    ('?')
      USAGE 'invalid option: -%s' "${OPTARG}"
      ;;

    (*)
      USAGE 'invalid option: --%s' "${option}"
      ;;
  esac
done

shift $((OPTIND - 1))

# verify arguments
#[ ${#} -ne 0 ] && USAGE 'extraneous arguments: %s' "${*}"
[ "${#}" -eq 0 ] && USAGE 'missing jail name arguments: %s' "$*"

# enable debugging
[ X"${debug}" = X"yes" ] && set -x

opts=
[ X"${prompt}" = X"no" ] && opts='-y'

exec-pkg() {
  local mode name
  mode="${1}"; shift
  name="${1}"; shift
  j="${1}"; shift
  case "${mode}" in
    (jexec)
      jexec -l "${name}" pkg -- "${@}"
      ;;
    (chroot)
      pkg --chroot="${j}" "${@}"
      ;;
    (*)
      ERROR 'unknown execution-type: %s' "${kind}"
      ;;
  esac
}


# process all jails
for name in "${@}"
do
  j="${prefix}/${name}"

  if [ X"${mode}" = X"auto" ]
  then
    if jls -j "${name}" > /dev/null 2>&1
    then
      kind=jexec
    else
      kind=chroot
    fi
  else
    kind="${mode}"
  fi
  VERBOSE 'jail chroot: %s' "${j}"

  [ -d "${j}" ] || ERROR 'missing jail chroot: %s' "${j}"

  # upgrade packages
  if [ X"${upgrade}" = X"yes" ]
  then
    printf 'upgrading packages in jail: %s using: %s\n' "${j}" "${kind}"
    exec-pkg "${kind}" "${name}" "${j}" upgrade ${opts}
  fi

  # clean downloaded packages
  if [ X"${clean}" = X"yes" ]
  then
    printf 'clean packages in jail: %s using: %s\n' "${j}" "${kind}"
    exec-pkg "${kind}" "${name}" "${j}" clean -a ${opts}
  fi

  # autoremove obsolete packages
  if [ X"${autoremove}" = X"yes" ]
  then
    printf 'autoremove packages in jail: %s using: %s\n' "${j}" "${kind}"
    exec-pkg "${kind}" "${name}" "${j}" autoremove ${opts}
  fi

done

#!/bin/sh
# match the faults

ERROR() {
  printf 'error: '
  printf "${@}"
  printf '\n'
  exit 1
}

VERBOSE() {
  [ X"${verbose}" = X"no" ] && return 0
  printf "${@}"
  printf '\n'
}

USAGE() {
  if [ -n "${1}" ]
  then
    printf 'error: '
    printf "${@}"
    printf '\n'
  fi
  cat <<EOF
usage: ${0##*/} [options]
       --help                 -h            this message
       --verbose              -v            more messages
       --fault=FILE           -f FILE       set the fault file [${fault_file}]
       --module=MODULE        -m MODULE     set the module name [${fault_module}]
       --debug                              show debug information
EOF
  exit 1
}


# main program
verbose=no
debug=no
fault_file=fault/fault.go
fault_module=fault

# parse options
while getopts :hvf:m:D-: option
do
  # convert long options
  if [ X"${option}" = X"-" ]
  then
    option="${OPTARG%%=*}"
    OPTARG="${OPTARG#${option}}"
    OPTARG="${OPTARG#=}"
  fi
  case "${option}" in
    (v|verbose)
      verbose=yes
      ;;

    (f|fault)
      fault_file="${OPTARG}"
      ;;

    (m|module)
      fault_module="${OPTARG}"
      ;;

    (--)
      break
      ;;

    (D|debug)
      debug=yes
      ;;

    (h|help)
      USAGE
      ;;

    ('?')
      USAGE 'invalid option: -%s' "${OPTARG}"
      ;;

    (*)
      USAGE 'invalid option: --%s' "${option}"
      ;;
  esac
done

shift $((OPTIND - 1))

# verify arguments
[ ${#} -ne 0 ] && USAGE 'extraneous arguments: %s' "${*}"

[ -z "${fault_file}" ] && USAGE 'fault file cannot be blank'
[ -f "${fault_file}" ] || USAGE 'missing fault file: "%s"' "${fault_file}"
[ -z "${fault_module}" ] && USAGE 'module name cannot be blank'
[ -z "$(printf '%s' "${fault_module}" | tr -d 0-9a-z)" ] || USAGE 'module name must only contain lower letters or digits'

# enable debuging
[ X"${debug}" = X"yes" ] && set -x

VERBOSE 'fault file: %s' "${fault_file}"
VERBOSE 'fault module: %s' "${fault_module}"

cleanup()
{
  rm -f "${defined_errors}"
  rm -f "${all_errors}"
  rmdir "${temp_dir}"
}


temp_dir=$(mktemp -d /tmp/faultmatchXXXXXXXXXX)
defined_errors="${temp_dir}/defined"
all_errors="${temp_dir}/all"
trap cleanup INT EXIT

# error definitions
awk '/^[[:space:]]*Err[[:alnum:]]+[[:space:]]*=/ { print "fault." $1 }' "${fault_file}" | sort -u > "${defined_errors}"

# extract all unique errors used
find . -name '*.go' -exec awk '
  BEGIN {
    fault = "'"${fault_module}"'[.]Err[[:alnum:]]+"
  }
  $0 ~ fault {
    #print $0
    if (match($0, "//")) {
      s = substr($0, 0, RSTART)
    } else {
      s = $0
    }
    for (;;) {
      if (match(s, fault)) {
        print substr(s, RSTART, RLENGTH)
        s = substr(s, RSTART + RLENGTH)
      } else {
        break
      }
    }
  }
' '{}' ';' | sort -u > "${all_errors}"


echo unused errors:
diff -u "${defined_errors}" "${all_errors}" | grep -E '^-[[:alnum:]]'

echo undefined errors:
diff -u "${defined_errors}" "${all_errors}" | grep -E '^[+][[:alnum:]]'

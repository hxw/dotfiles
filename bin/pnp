#!/bin/sh
# push branches and tags out to various repositories

ERROR() {
  printf 'error: '
  printf "${@}"
  printf '\n'
  exit 1
}

VERBOSE() {
  [ X"${verbose}" = X"no" ] && return 0
  printf "${@}"
  printf '\n'
}

USAGE() {
  if [ -n "${1}" ]
  then
    printf 'error: '
    printf "${@}"
    printf '\n'
  fi
  cat <<EOF
usage: ${0##*/} <options> command
       --help                 -h            this message
       --verbose              -v            more messages
       --tags                 -t            push all tags
       --repos=LIST           -r LIST       list of repos [${repos}]
       --branches=LIST        -b LIST       list of branches [${branches}]
       --debug                -D            show debug information
EOF
  exit 1
}


# main program
verbose=no
debug=no
prune=no
tags=no
repos='origin'
branches='main'

# parse options
while getopts :hvptr:b:D-: option
do
  # convert long options
  if [ X"${option}" = X"-" ]
  then
    option="${OPTARG%%=*}"
    OPTARG="${OPTARG#${option}}"
    OPTARG="${OPTARG#=}"
  fi
  case "${option}" in
    (v|verbose)
      verbose=yes
      ;;

    (p|prune)
      prune=yes
      ;;

    (t|tag)
      tags=yes
      ;;

    (r|repos)
      repos="$(printf '%s' "${OPTARG}" | sed 's/,/ /g')"
      [ -z "${repos}" ] && USAGE 'repos cannot be blank'
      ;;

    (b|branches)
      branches="$(printf '%s' "${OPTARG}" | sed 's/,/ /g')"
      [ -z "${branches}" ] && USAGE 'branches cannot be blank'
      ;;

    (--)
      break
      ;;

    (D|debug)
      debug=yes
      ;;

    (h|help)
      USAGE
      ;;

    ('?')
      USAGE 'invalid option: -%s' "${OPTARG}"
      ;;

    (*)
      USAGE 'invalid option: --%s' "${option}"
      ;;
  esac
done

shift $((OPTIND - 1))

# verify arguments
[ ${#} -ne 0 ] && USAGE 'extraneous arguments: %s' "${*}"

# enable debugging
[ X"${debug}" = X"yes" ] && set -x

# pull options
pull_opts='--rebase'
[ X"${prune}" = X"yes" ] && pull_opts="${pull_opts} --prune"

# rebase
if ! git pull ${pull_opts}
then
   echo 'Check modifications in first'
   exit 1
fi

# find all tags
if [ X"${tags}" = X"yes" ]
then
  TagList=$(git tag -l)
  printf 'TAGS: %s\n' "${TagList}"
fi

# synchonise all repos
for r_actual in $(git remote show)
do
  for repo in ${repos}
  do
    if [ X"${repo}" = X"${r_actual}" ]
    then

      for branch in ${branches}
      do
        printf 'branch: %s ==> repo: %s\n' "${branch}" "${repo}"
        git push "${repo}" "${branch}"
      done

      if [ X"${tags}" = X"yes" ]
      then
        for tag in ${TagList}
        do
          printf 'tag: %s ==> repo: %s\n' "${tag}" "${repo}"
          git push "${repo}" "${tag}"
        done
      fi
      printf '\n'
    fi
  done
done

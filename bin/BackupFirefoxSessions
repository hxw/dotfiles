#!/bin/sh
# save a copy of the Firefox sessions file


ERROR()
{
  printf 'error: '
  printf "$@"
  printf '\n'
  exit 1
}

USAGE()
{
  if [ -n "$1" ]
  then
    printf 'error: '
    printf "$@"
    printf '\n'
  fi
  echo usage: $(basename "$0")
  echo '       --help           -h         this message'
  echo '       --verbose        -v         more messages'
  echo '       --config=DIR     -c DIR     config subdirectory'
  echo '       --session=FILE   -s FILE    specify session file'
  echo '       --dest=DIR       -d DIR     backupsdirectory'
  exit 1
}

VERBOSE()
{
  [ X"${verbose}" = X"no" ] && return 0
  printf "$@"
  printf '\n'
}

# main program
verbose=no
config=xa3aerai.default
#session=sessionstore.js
session=recovery.jsonlz4
dest_dir="${HOME}/Firefox-Sessions"

debug=no

getopt=/usr/local/bin/getopt
[ -x "${getopt}" ] || getopt=getopt
args=$(${getopt} -o hvc:s:d: --long=help,verbose,config:,session:,dest:,debug -- "$@") ||exit 1

# replace the arguments with the parsed values
eval set -- "${args}"

while :
do
  case "$1" in
    (-v|--verbose)
      verbose=yes
      ;;

    (-c|--config)
      config=$2
      shift
      ;;

    (-s|--session)
      session=$2
      shift
      ;;

    (-d|--dest)
      dest_dir=$2
      shift
      ;;

    (--debug)
      debug=yes
      ;;

    (--)
      shift
      break
      ;;

    (-h|--help)
      USAGE
      ;;

    (*)
      USAGE 'invalid option: %s' "$1"
      ;;
  esac
  shift
done

# verify arguments
[ -z "${config}" ] && USAGE 'config is not set'
[ -z "${session}" ] && USAGE 'session is not set'
#[ $# -eq 0 ] && USAGE 'missing arguments'
[ $# -ne 0 ] && USAGE 'extraneous arguments'
#[ $# -ne 2 ] && USAGE 'exactly two arguments are required'

config_dir="${HOME}/.mozilla/firefox/${config}/sessionstore-backups"
[ -d "${config_dir}" ] || USAGE 'not a directory: "%s"' "${config_dir}"

session_file="${config_dir}/${session}"
[ -f "${session_file}" ] || USAGE 'missing file: "%s"' "${session_file}"

[ -d "${dest_dir}" ] || USAGE 'not a directory: "%s"' "${dest_dir}"


# enable debugging
[ X"${debug}" = X"yes" ] && set -x

date=$(date '+%Y-%m-%d-%H%M')
VERBOSE 'backup on: %s' "${date}"

# backup names
full_backup="${dest_dir}/${session}.${date}"

# perform the copy
cp "${session_file}" "${full_backup}"
VERBOSE 'full backup to: %s' "${full_backup}"
